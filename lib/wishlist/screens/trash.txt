import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:pbp_django_auth/pbp_django_auth.dart';
import 'package:provider/provider.dart';
import 'package:book_buddies_mobile/book/model.dart';
import 'package:book_buddies_mobile/widgets/left_drawer.dart';
import '../models/wishlist.dart';
import 'package:http/http.dart' as http;

class WishlistPage extends StatelessWidget {
  final List<int>? bookIds;


  WishlistPage({Key? key, this.bookIds}) : super(key: key);

  Future<List<Wishlist>> fetchBooksDetails(CookieRequest request) async {
    List<Wishlist> books = [];
    var bookDataJson = await request.get('http://127.0.0.1:8000/wishlist/get_wishlist_json/');
    print('Received JSON: $bookDataJson');

    for (var bookJson in bookDataJson) {
      print('Parsing book: $bookJson');
      var book = Wishlist.fromJson(bookJson); // Ensure this method matches your JSON structure
      books.add(book);
    }
    return books;
  }

  Future<Wishlist> fetchBookData(BuildContext context) async {
    final request = context.read<CookieRequest>();
    var response = await request.get('http://127.0.0.1:8000/user/fetch_user_data/');

    // Check if the response was successful
    if (response.statusCode == 200) {
      var responseData = json.decode(response.body);

      // Decode the JSON string inside 'user_data' field
      var userDataJson = json.decode(responseData['user_data']);

      // Check if the userDataJson is not empty and is a list
      if (userDataJson.isNotEmpty && userDataJson is List) {
        // Parse the first user object in the list
        var user = Wishlist.fromJson(userDataJson.first);
        return user;
      } else {
        throw Exception('Book data is empty or invalid');
      }
    } else {
      throw Exception('Failed to load user data with status code: ${response.statusCode}');
    }
  }

  Future<Map<int, Book>> fetchBooks() async {
    var url = Uri.parse(
        'http://localhost:8000/book/get-book/');
    var response = await http.get(
      url,
      headers: {"Content-Type": "application/json"},
    );

    // melakukan decode response menjadi bentuk json
    var data = jsonDecode(utf8.decode(response.bodyBytes));

    // melakukan konversi data json menjadi object Product
    List<Book> listAllBook = [];
    for (var d in data) {
      if (d != null) {
        listAllBook.add(Book.fromJson(d));
      }
    }

    Map<int, Book> mapBook = {};
    for (Book book in listAllBook) {
      mapBook[book.pk] = book;
    }
    return mapBook;
  }

  @override
  Widget build(BuildContext context) {
    final request = context.read<CookieRequest>();

    return Scaffold(
      appBar: AppBar(
        title: Text('User Book History'),
      ),
      drawer: const LeftDrawer(),
      body: FutureBuilder<List<Wishlist>>(
        future: fetchBooksDetails(request),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          } else if (snapshot.hasData && snapshot.data!.isNotEmpty) {
            return ListView.builder(
              itemCount: snapshot.data!.length,
              itemBuilder: (context, index) {
                Wishlist book = snapshot.data![index];
                return Card(
                  elevation: 4.0,
                  margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0),
                  child: ListTile(
                    leading: Image.network(
                      book.fields.imageCover,
                      width: 50,
                      fit: BoxFit.cover,
                      errorBuilder: (BuildContext context, Object exception, StackTrace? stackTrace) {
                        // Log the error, show a placeholder, etc.
                        return Image.asset('assets/placeholder-image.png', width: 50, fit: BoxFit.cover);
                      },
                    ),
                    title: Text(mapBook[book]),
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: <Widget>[
                        Text('Author: ${book.fields.author}'),
                        Text('Publisher: ${book.fields.publisher}'),
                        Text('Year: ${book.fields.yearPublication}'),
                      ],
                    ),
                    isThreeLine: true,
                  ),
                );
              },
            );
          } else {
            return const Center(
              child: Text('No books found.'),
            );
          }
        },
      ),
    );
  }
}


  @override
  Widget build(BuildContext context) {
    final request = context.watch<CookieRequest>();

    return Scaffold(
      appBar: AppBar(
        title: const Text('Forum'),
      ),
      drawer: const LeftDrawer(),
      body: Column(
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Radio(
                value: FilterOptions.all,
                groupValue: _selectedFilter,
                onChanged: (value) {
                  setState(() {
                    _selectedFilter = value as FilterOptions;
                  });
                },
              ),
              const Text('All'),
              Radio(
                value: FilterOptions.read,
                groupValue: _selectedFilter,
                onChanged: (value) {
                  setState(() {
                    _selectedFilter = value as FilterOptions;
                  });
                },
              ),
              const Text('Already read'),
              Radio(
                value: FilterOptions.notRead,
                groupValue: _selectedFilter,
                onChanged: (value) {
                  setState(() {
                    _selectedFilter = value as FilterOptions;
                  });
                },
              ),
              const Text('Not read yet'),
            ],
          ),
          Expanded(
            child: FutureBuilder(
              future: fetchWishlist(),
              builder: (context, AsyncSnapshot snapshot) {
                if (snapshot.data == null) {
                  return const Center(child: CircularProgressIndicator());
                } else {
                  if (snapshot.data!.isEmpty) {
                    return Column(
                      children: [
                        const Text(
                          "Belum ada wishlist.",
                          style:
                          TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        SizedBox(height: 8),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            ElevatedButton(
                              onPressed: () {
                                // Navigator.of(context).push(MaterialPageRoute(
                                //     builder: (context) => ForumFormPage()
                                // ));
                              },
                              child: Text('Add Wishlist'),
                            ),
                          ],
                        ),
                      ],
                    );
                  } else {
                    return ListView.builder(
                      itemCount: snapshot.data!.length + 1, // +1 for the button
                      itemBuilder: (context, index) {
                        if (index == snapshot.data!.length) {
                          // Return a button for the last item in the list
                          return Padding(
                            padding: const EdgeInsets.symmetric(
                                horizontal: 16, vertical: 8.0),
                            // Adjust vertical padding
                            child: Center(
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  ElevatedButton(
                                    onPressed: () {
                                      // Navigator.of(context).push(MaterialPageRoute(
                                      //     builder: (context) => ForumFormPage()
                                      // ));
                                    },
                                    child: Text('Add Wishlist'),
                                  ),
                                ],
                              ),
                            ),
                          );
                        }
                        else {
                          return Container(
                            height: 150,
                            margin: const EdgeInsets.symmetric(
                                horizontal: 16, vertical: 8.0),
                            decoration: BoxDecoration(
                              border: Border.all(
                                  color: const Color(0xFFE0E0E0)),
                              borderRadius: BorderRadius.circular(8.0),
                            ),
                            child: Padding(
                              padding: const EdgeInsets.all(8),
                              child: Column(
                                mainAxisAlignment: MainAxisAlignment.center,
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Row(
                                    mainAxisAlignment: MainAxisAlignment
                                        .spaceBetween,
                                    children: [
                                      Expanded(
                                        child: Text(
                                          "${snapshot.data![index].fields
                                              .title}",
                                          style: const TextStyle(
                                            fontSize: 18.0,
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                      ),
                                      Text("Total Reply: ${snapshot
                                          .data![index].fields.totalReply}"),
                                    ],
                                  ),
                                  const Divider(
                                    thickness: 1,
                                    // Adjust the thickness as needed
                                    color: Colors
                                        .grey, // Define the color of the divider
                                  ),
                                  const SizedBox(height: 10),
                                  Text(
                                      "Posted by ${mapUser[snapshot.data![index]
                                          .fields.user]?.fields.username} at ${snapshot
                                          .data![index]
                                          .fields.createdAt.day.toString()
                                          .padLeft(2, '0')}/${snapshot
                                          .data![index].fields.createdAt.month
                                          .toString().padLeft(
                                          2, '0')}/${snapshot.data![index]
                                          .fields.createdAt.year.toString()
                                          .padLeft(4, '0')}"),
                                  const SizedBox(height: 10),
                                  Text(
                                    "${snapshot.data![index].fields.content}",
                                    maxLines: 2,
                                    overflow: TextOverflow.ellipsis,
                                  ),
                                ],
                              ),
                            ),

                          );
                        }
                      },
                    );
                  }
                }
              },
            ),
          ),
        ],
      ),
    );
   }